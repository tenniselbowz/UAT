/**************************************************************************************
 Author       :   Amarendar Junuthula
 Created Date :   December 08, 2015
 Description  :   This class is the Test class for the class: ActivityUtils
It uses data generated by TestDataFactory class.
***************************************************************************************/
@isTest(seeAllData = true)
public class ActivityUtilsTest {
    static testMethod void myUnitTest() {
        //Calling Account Creation from Test Data Factory
        Account a = TestDataFactory.createAccounts(1)[0];
        
        //Calling Contact creation metohd from Test Data Factory
        Contact c = TestDataFactory.createContacts(1)[0];
        c.AccountId = a.id;
        update c;
        
        //Calling Opportunity creation metohd from Test Data Factory
        Opportunity o = TestDataFactory.createOpportunities(1)[0];
        o.AccountId = a.id;
        update o;
        
        //Calling Lead creation metohd from Test Data Factory
        Lead l = TestDataFactory.createLeads(1)[0];
        
        //Calling Case creation metohd from Test Data Factory
        Case cs = TestDataFactory.createCases(1)[0];
        cs.AccountId = a.id;
        cs.ContactId = c.id;
        update cs;
        
        Change_Request__c cr = TestDataFactory.createChangeRequests(1)[0];
               
           
            Task t = new Task();
            t.Status = 'Not Started';
            t.Priority = 'Normal';
            t.Type = 'Scheduled Call Back';
            t.WhatId = cs.Id;
            
       
            Event ev = new Event();
            ev.StartDateTime = DateTime.now() + 7;
            ev.EndDateTime = DateTime.now() + 14;
            ev.WhatId = cs.Id;
            
                          
        try { 
            // Perform some database operations that // might cause an exception. 
            insert t;
        insert ev;
        } 
        catch(DmlException e) { // DmlException handling code here. 
             System.debug('The following exception has occurred: ' + e.getMessage()); 
        }
        
        List<Attachment> attachmentList = new list<Attachment>();
        
        for(Integer i=0; i<5; i++){
            
        }
         Attachment attach=new Attachment();

        attach.Name='Unit Test Attachment';

        Blob bodyBlob=Blob.valueOf('Unit Test Attachment Body');

        attach.body=bodyBlob;

        attach.parentId=t.id;

        attach.ContentType = 'application/msword';

        attach.IsPrivate = false;

        attach.Description = 'Test';

        insert attach;
        
        
        Attachment attach1=new Attachment();

        attach1.Name='Unit Test Attachment1';

        Blob bodyBlob1=Blob.valueOf('Unit Test Attachment Body');

        attach1.body=bodyBlob1;

        attach1.parentId=ev.id;

        attach1.ContentType = 'application/msword';

        attach1.IsPrivate = false;

        attach1.Description = 'Test';
test.startTest();
        insert attach1;

        update t;
        delete t;
        undelete t;
        update ev;
        delete ev;
        undelete ev;
        update attach;
        delete attach;
        undelete attach;
test.stopTest();       

               
                
 
        /*test.startTest();
            system.assertEquals(6, [SELECT Number_of_Open_Activities__c FROM Account WHERE Id = :a.Id].Number_of_Open_Activities__c);
            system.assertEquals(2, [SELECT Number_of_Open_Activities__c FROM Opportunity WHERE Id = :o.Id].Number_of_Open_Activities__c);
            system.assertEquals(2, [SELECT Number_of_Open_Activities__c FROM Contact WHERE Id = :c.Id].Number_of_Open_Activities__c);
            system.assertEquals(2, [SELECT Number_of_Open_Activities__c FROM Lead WHERE Id = :l.Id].Number_of_Open_Activities__c);
            system.assertEquals(2, [SELECT Number_of_Open_Activities__c FROM Case WHERE Id = :cs.Id].Number_of_Open_Activities__c);
            //system.assertEquals(2, [SELECT Number_of_Open_Activities__c FROM Change_Request__c WHERE Id = :cr.Id].Number_of_Open_Activities__c);
 
            //Delete some activities and run assertions again
            delete tList[2];
            delete eList;
            system.assertEquals(2, [SELECT Number_of_Open_Activities__c FROM Account WHERE Id = :a.Id].Number_of_Open_Activities__c);
            system.assertEquals(1, [SELECT Number_of_Open_Activities__c FROM Opportunity WHERE Id = :o.Id].Number_of_Open_Activities__c);
            system.assertEquals(0, [SELECT Number_of_Open_Activities__c FROM Contact WHERE Id = :c.Id].Number_of_Open_Activities__c);
            system.assertEquals(1, [SELECT Number_of_Open_Activities__c FROM Lead WHERE Id = :l.Id].Number_of_Open_Activities__c);
            system.assertEquals(1, [SELECT Number_of_Open_Activities__c FROM Case WHERE Id = :cs.Id].Number_of_Open_Activities__c);
            //system.assertEquals(1, [SELECT Number_of_Open_Activities__c FROM Change_Request__c WHERE Id = :cr.Id].Number_of_Open_Activities__c);
        test.stopTest();*/
 
    }
}